######### cyfrowy przetwornik ###############################################################################################

######### transmisja szeregowa #############################################################################################

#pliki do obsługi USART

RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO  , ENABLE);//  wlacz  taktowanie  AFIO
RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);//  wlacz  taktowanie  GPIOA
RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 , ENABLE);//  wlacz  taktowanie  USART1

#konfiguracja pinu

GPIO_InitTypeDef  GPIO_InitStruct;23
//  Pin  nadawczy  należy  skonfigurowa ć jako " alternative  function , push -pull"
GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9;
GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
GPIO_Init(GPIOA , &GPIO_InitStruct);
//  Pin  odbiorczy  należy  skonfigurowa ć jako  wejście "pływające"
GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
GPIO_Init(GPIOA , &GPIO_InitStruct);

#konfiguracja transmisji szeregowej

USART_InitTypeDef  USART_InitStruct;
USART_InitStruct.USART_BaudRate = 19200;
USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
USART_InitStruct.USART_WordLength = USART_WordLength_9b;
USART_InitStruct.USART_Parity = USART_Parity_Even;
USART_InitStruct.USART_StopBits = USART_StopBits_1;
USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
USART_Init(USART1 , &USART_InitStruct);
USART_ITConfig(USART1 , USART_IT_RXNE , DISABLE);
USART_ITConfig(USART1 , USART_IT_TXE , DISABLE);

#nadanie priorytetu przerwań

NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
NVIC_Init (& NVIC_InitStructure);

#włączenie usart

USART_Cmd(USART1 , ENABLE);

######### MODBUS ##############################################################################################################

#wysyłanie wiadomości w trybie master

void  MB_SendRequest(uint8_t  addr , MB_FUNCTION f, uint8_t* datain , uint16_t  lenin)|

#odbieranie odpowiedzi

MB_RESPONSE_STATE  MB_GetResponse(uint8_t  addr , MB_FUNCTION f,uint8_t ** dataout , uint16_t* lenout , uint32_t  timeout)

##przykładowe wysłanie na adres 103 ustawienie cewki nr.3 na 1

uint8_t  write_single_coil_3 [] = {0x00 , 0x03 , 0xFF , 0x00};
MB_SendRequest (103,  FUN_WRITE_SINGLE_COIL , write_single_coil_3 , 4);

#odebranie

uint8_t *resp;
uint16_t  resplen;
MB_RESPONSE_STATE  respstate;
respstate = MB_GetResponse (103,  FUN_WRITE_SINGLE_COIL , &resp , &resplen , 1000);

##przykładowe odczytanie

uint8_t  read_discrete_input_4 [] = {0x00 , 0x04 , 0x00 , 0x01};
MB_SendRequest (103,  FUN_READ_DISCRETE_INPUTS , read_discrete_input_4 , 4);

#odebranie

uint8_t *resp;
uint16_t  resplen;
MB_RESPONSE_STATE  respstate;
respstate = MB_GetResponse (103,  FUN_READ_DISCRETE_INPUTS , &resp , &resplen , 1000);

##############koniec przykładów (?)############################

####konfiguracja SysTick (przerwanie co 10 us) - z lab2 (chyba wyliczenie 10us trzeba zrobić)####

SysTick_Config (9000);//  (72 MHz /8) / 9000 = 1KHz  (1/1 KHz = 1ms)
SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);

#obsługa przerwania

void  SysTick_Handler(void);

static unsigned int msc
#include "delay.h"
void DelayTick(void){
	if(msc > 0) --msc;
}

void Delay(unsigned int ms){
	msc = ms;
	while(msc > 0);
}

#zmiana priorytetu systick

NVIC_SetPriority(SysTick_IRQn , 0);

#priorytety przerwań ale to chyba takie ogólne
NVIC_PriorityGroupConfig(NVIC_PriorityGroup_X);
########

#konfiguracja USART1

void  USART1_IRQHandler(void){
if( USART_GetITStatus(USART1 , USART_IT_RXNE) ){
	USART_ClearITPendingBit(USART1 , USART_IT_RXNE);
	SetCharacterReceived(true);
}
if( USART_GetITStatus(USART1 , USART_IT_TXE) ){
	USART_ClearITPendingBit(USART1 , USART_IT_TXE);
	SetCharacterReadyToTransmit ();
}
}

#implementacja wysłania i odebrania znaku

void  Communication_Put(uint8_t  ch){
	USART_SendData(USART1 , ch);
}
uint8_t  Communication_Get(void){
	uint8_t  tmp = USART_ReceiveData(USART1);
	SetCharacterReceived(false);
	return  tmp;
}

#przełączanie trybów modułu komunikacyjnego (nasłuchiwanie/transmisja)

void  Communication_Mode(bool rx, bool tx){
	USART_ITConfig(USART1 , USART_IT_RXNE , rx?ENABLE:DISABLE);
	USART_ITConfig(USART1 , USART_IT_TXE  , tx?ENABLE:DISABLE);
}

#zatrzymanie i uruchomienie tim4

void  Enable50usTimer(void){
	TIM_ITConfig(TIM4 , TIM_IT_Update , ENABLE);
}
void  Disable50usTimer(void){
	TIM_ITConfig(TIM4 , TIM_IT_Update , DISABLE);
}

####konfiguracja tim4  (kwanty 50us)- z lab2 (tu chyba wyliczenie tych 50us trzeba zrobić)####

#odmierzanie czasu

TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
TIM_OCInitTypeDef  TIM_OCInitStructure;
TIM_TimeBaseStructure.TIM_Prescaler = 7200 -1;//  72 MHz /7200=10 kHz
TIM_TimeBaseStructure.TIM_Period = 10000;//  10 kHz /10000=1 Hz  (1s)
TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;//  zliczanie  w gore
TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;//  brak  powtorzen
TIM_TimeBaseInit(TIM4 , &TIM_TimeBaseStructure);//  inicjalizacja  TIM4
TIM_ITConfig ( TIM4 , TIM_IT_CC2 | TIM_IT_Update , ENABLE );//  wlaczenie  przerwan
TIM_Cmd(TIM4 , ENABLE);//  aktywacja  timera  TIM4

//  konfiguracja  kanalu  2  timera
TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;//  brak  zmian  OCxREF
TIM_OCInitStructure.TIM_Pulse = 2000;//  wartosc  do  porownania
TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;//  wlaczenie  kanalu
TIM_OC2Init(TIM4 , &TIM_OCInitStructure);//  inicjalizacja  CC2

#przerwanie

NVIC_InitTypeDef  NVIC_InitStructure;

NVIC_ClearPendingIRQ(TIM4_IRQn);//  wyczyszczenie  bitu  przerwania
NVIC_EnableIRQ(TIM4_IRQn);//  wlaczenie  obslugi  przerwania
NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;//  nazwa  przerwania
NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;//  priorytet  wywlaszczania
NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;//  podpriorytet
NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//  wlaczenie
NVIC_Init (& NVIC_InitStructure);//  inicjalizacja  struktury

#obsłużenie przerwania

void  TIM4_IRQHandler(void){
	if(TIM_GetITStatus(TIM4 ,TIM_IT_CC2) !=  RESET){
		LED(LED2 ,LED_TOGGLE);
		TIM_ClearITPendingBit(TIM4 , TIM_IT_CC2);
	} else if(TIM_GetITStatus(TIM4 ,TIM_IT_Update) !=  RESET){
		LED(LED3 ,LED_TOGGLE);
		TIM_ClearITPendingBit(TIM4 , TIM_IT_Update);
	}
}
########
###############dodatkowe może się przyda?#################

#ledy

#include "stm32f10x.h"//  definicja  typu  uint16_t  i  stalych  GPIO_Pin_X
#define  LED1  GPIO_Pin_8
#define  LED2  GPIO_Pin_9
#define  LED3  GPIO_Pin_10
#define  LED4  GPIO_Pin_11
#define  LED5  GPIO_Pin_12
#define  LED6  GPIO_Pin_13
#define  LED7  GPIO_Pin_14
#define  LED8  GPIO_Pin_15
#define  LEDALL (LED1|LED2|LED3|LED4|LED5|LED6|LED7|LED8)
enum  LED_ACTION { LED_ON , LED_OFF , LED_TOGGLE  };

void  LED(uint16_t led , enum  LED_ACTION  act);

void  LED(uint16_t led , enum  LED_ACTION  act) {
	switch(act){
		case  LED_ON: GPIO_SetBits(GPIOB , led); break;
		case  LED_OFF: GPIO_ResetBits(GPIOB , led); break;
		case  LED_TOGGLE: GPIO_WriteBit(GPIOB , led ,
			(GPIO_ReadOutputDataBit(GPIOB , led) ==  Bit_SET?Bit_RESET:Bit_SET));
		}
}