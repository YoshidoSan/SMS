##zmienne#################################################################################################################################################################
int i=0;
float e_previous=0.0f;
float u_previous=0.0f;
float ui_previous=0.0f;
float e;
float T=0.1;

//dmc
int D=30		//horyzont dynamiki
float deltaU=0.0f;
float deltaUP[D-1]={0};
//z matlaba
float Ku[D-1]={0.0f};
float Ke=0.0f;
float Ku_deltaUp=0.0f;

//flags
int flag=0;
int flag_auto=1;
int flag_hot=0;
int flag_communication=1;
int flag_czujnik=1;
int flag_previous_auto=1,flag_previous_hot=0,flag_previous_communication=1,flag_previous_czujnik=1;
float u = 0.0f;
float u_zad = 10.0f;
int i=0;
float temp_previous=0;

###funkcje##################################################################################################################################################################

float DMC()
{
	int i=0, j=D;
	while(i < D-1){
        	Ku_deltaUp += Ku[i] * deltaUP[i];
        	i++;
	}
	deltaU = Ke * e - Ku_deltaUp;
   	while(j > 0){
        	deltaUP[j] = deltaUP[j-1];
        	j--;
    	}
    	deltaUP[0] = deltaU;
	float x = u_previous + deltaU
	return x;
}
	
###### DOMC do timera tim2 ########## powinno byc jak na poprzednim projekcie #####################################################

static float y = 0.0f;
static float u = 0.0f;
y = (input-2048.0f); // przejscie z 0 - 4095 do -2048 - 2047
e= y_zadany - y;

if(i<100){
	y_zadany=1000.0f;
	i++;
}
else{
	y_zadany=500.0f;
}
u = inzynierska();   //Tu ustawiamy sterowanie

if(u >  2047.0f) u =  2047.0f;
if(u < -2048.0f) u = -2048.0f;
output = u+2048.0f; // przejscie z -2048 - 2047 do 0 - 4095
updateControlSignalValue(output); // aplikacja natychmiast po wyznaczeniu sterowania czy opoznic?			
while(HAL_UART_GetState(&huart) == HAL_UART_STATE_BUSY_TX);
sprintf(text,"U=%+8.2f;Y=%+8.2f;",u,y); // 22 znaki
if(HAL_UART_Transmit_IT(&huart, (uint8_t*)text, 22)!= HAL_OK){
	Error_Handler();   
}
	
u_previous = u;
e_previous = e;

#######  cały hal tim #############################################################################################################
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == TIM2){
		static uint16_t raw_y = 2345;
		static uint16_t raw_u = 0;
		static float y = 0.0f;
		
		MB_SendRequest(MODBUS_SLAVE_ADDRESS, FUN_READ_INPUT_REGISTER, get_temp, 4);
		respstate = MB_GetResponse(MODBUS_SLAVE_ADDRESS, FUN_READ_INPUT_REGISTER, &resp, &resplen, 1000);
			if(respstate != RESPONSE_OK) {	
				flag_communication=0; 
				com_error_draw();
			}
			//while(1);
		else {
			flag_communication=1;
			raw_y = resp[1]*0x100+resp[2];
			y = raw_y/100.0f;
			temp = raw_y;
		}
		if(temp>=5500.0f && temp<=12500.0f ) flag_hot=1; //przegrzanie
		else flag_hot=0;
		if(temp>=12500.0f || temp<=-5500.0f ) flag_czujnik=0;
		else flag_czujnik=1;
		e=temp_zadana-temp/100.0f;
		/*
		IF DO OPOZNIENIA
		if (i< 5 ){
			u=-40;
			i++;}
		else
		u=0;*/
		
		//HAL_Delay(2000);
		/* przyklady tego, jak nalezy interpretowac poszczegolne wartosci sterowania */
		//u = -10.0; // grzanie z moca (-10+50)% =  40%
		//u =   0.0; // grzanie z moca (  0+50)% =  50%
		//u =  50.0; // grzanie z moca ( 50+50)% = 100%
		
		
		//STEROWANIE
		if(flag_auto==1 && flag_czujnik==1) u=DMC();
		else if(flag_czujnik==1)u=u_zad;
		else u=-50.0f;
				
		/* aplikacja ograniczen na sygnal sterujacy */
		if(u >   50.0f) u =  50.0f;
		if(u <  -50.0f) u = -50.0f;
		
		u_previous=u;
		/* skalowanie z -50..50 do 0..1000 */
		raw_u = (uint16_t)(u+50.0f)*10; // przejscie z -2048 - 2047 do 0 - 4095
		
		/* przygotowanie wiadomosci MODBUS */
		heater_var[2] = (raw_u&0xFF00)>>8; // pierwszy bajt
		heater_var[3] = (raw_u&0x00FF)>>0; // drugi bajt
		
		/* wyslanie wiadomosci */
		MB_SendRequest(MODBUS_SLAVE_ADDRESS, FUN_WRITE_SINGLE_REGISTER, heater_var, 4);
		
		/* odczyt odpowiedzi i sprawdzenie jej poprawnosci */
		respstate = MB_GetResponse(MODBUS_SLAVE_ADDRESS, FUN_WRITE_SINGLE_REGISTER, &resp, &resplen, 1000);
		if(respstate != RESPONSE_OK) while(1);
		
		/* komunikacja z komputerem */
		while(HAL_UART_GetState(&huart) == HAL_UART_STATE_BUSY_TX);
		sprintf(txt,"U=%+8.2f;Y=%+8.2f;",u,y);
		if(HAL_UART_Transmit_IT(&huart, (uint8_t*)txt, 22)!= HAL_OK){
			Error_Handler();   
		}	
	} 
	if (htim->Instance == TIM3){ // timer odpowiedzialny za aktualizacje MB i odliczanie timeout'u
		MB();
		TimeoutTick();
	}
	if (htim->Instance == TIM4){ // timer odpowiedzialny za odliczanie kwantow 50us
		Timer50usTick();
	}
	if (htim->Instance == TIM5){ // ...
	}
	//przypisywanie poprzednich stanow
				temp_previous=temp;
				flag_previous_hot=flag_hot;
				flag_previous_communication=flag_communication;
				flag_previous_auto=flag_auto;
				flag_previous_czujnik=flag_czujnik;
}
######## rysowanie interfejsu ####################################################################################################################
int Displayflag=0;
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc){
	static char buf1[100] = {0};
	static char buf2[100] = {0};
	static char buf3[100] = {0};
	static char buf4[100] = {0};
	static char tempzadanabuf[100] = {0};
	static char u_buf[100] = {0};
	
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	//sprintf(buf1, "ADDRESS: %d", MODBUS_SLAVE_ADDRESS);
	sprintf(buf2, "temperatura: %.2f ", (float)(temp/100.0f));
	//sprintf(buf3, "pasek     : %d", pasek);
	//sprintf(buf3, "TS     : %d", ts_counter);
	//sprintf(buf4, "USER   : %d", user_counter);
	sprintf(buf1, "uchyb   : %.2f  ", e);
	sprintf(tempzadanabuf, "T zadana: %d   ",(int)temp_zadana);
	sprintf(u_buf, "Sterowanie: %d   ", (int)u);
	//BSP_LCD_DisplayStringAtLine(1,(uint8_t*)buf1);
	//BSP_LCD_DisplayStringAtLine(2,(uint8_t*)buf3);

	//wyswietlanie temp aktualnej zadanej i sterowania 
	BSP_LCD_SetFont(&Font20); //ustawienie czcionki
	BSP_LCD_DisplayStringAtLine(1,(uint8_t*)buf2);
	BSP_LCD_DisplayStringAtLine(2,(uint8_t*)tempzadanabuf);
	BSP_LCD_DisplayStringAtLine(3,(uint8_t*)u_buf);
	BSP_LCD_DisplayStringAtLine(4,(uint8_t*)buf1);
	BSP_LCD_DisplayStringAtLine(5,(uint8_t*)buf3);
	

	//czyszczenie pola o przegrzaniu
	if(flag_hot==0){ // && flag_previous_hot==1){
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
		BSP_LCD_FillRect(0,172,160,50);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	}
		//czyszczenie pola o komunikacji
	if(flag_communication==1){// && flag_previous_communication==0){
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
		BSP_LCD_FillRect(159,172,160,50);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	}
		//czyszczenie pola o czujniku
	if(flag_czujnik==1){// && flag_previous_czujnik==0){
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
		BSP_LCD_FillRect(319,172,160,50);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	}
	//wyswietlanie ostrzezenia o przegrzaniu
	if(flag_hot==1) {//&& flag_previous_hot!=flag_hot){
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
		BSP_LCD_FillRect(0,172,160,50);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		BSP_LCD_SetFont(&Font16); //ustawienie czcionki
		BSP_LCD_DisplayStringAt(0,172+12,(uint8_t*)"PRZEGRZANIE", LEFT_MODE);
	}
	//wyswietlanie ostrzezenia o bledzie komunikacji
	if(flag_communication==0){// && flag_previous_communication!=flag_communication){
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
		BSP_LCD_FillRect(159,172,160,50);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		BSP_LCD_SetFont(&Font16); //ustawienie czcionki
		BSP_LCD_DisplayStringAt(159,172+12,(uint8_t*)"BLAD KOMUNIKACJI", LEFT_MODE);
	}
	//wyswietlanie ostrzezenia o bledzie czujnika
	if(flag_czujnik==0 ){//&& flag_previous_czujnik!=flag_czujnik){
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
		BSP_LCD_FillRect(319,172,160,50);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		BSP_LCD_SetFont(&Font16); //ustawienie czcionki
		BSP_LCD_DisplayStringAt(319,172+12,(uint8_t*)"BLAD CZUJNIKA", LEFT_MODE);
	}
	//wyswietlanie przycisków auto i manual{		
		BSP_LCD_SetFont(&Font12);
		BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
		if(flag_auto==1)BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
		BSP_LCD_FillRect(429,0,50,50);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		BSP_LCD_DisplayStringAt(429,0,(uint8_t*)"AUTO", LEFT_MODE);//auto
		BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
		if(flag_auto==0)BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
		BSP_LCD_FillRect(429,49,50,50);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		BSP_LCD_SetFont(&Font12); //ustawienie czcionki
		BSP_LCD_DisplayStringAt(429,0+49,(uint8_t*)"MANUAL", LEFT_MODE);

//wyswietlanie przycisków sterowania termostatem i grzalkami

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
	BSP_LCD_FillRect(329,0,100,50);
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
	BSP_LCD_FillRect(329,49,100,50);
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	BSP_LCD_SetFont(&Font12);
	BSP_LCD_DisplayStringAt(329,0+49-12,(uint8_t*)"TEMP ZADANA", LEFT_MODE);
	BSP_LCD_DisplayStringAt(329,49+50-12,(uint8_t*)"STEROWANIE GRZALKA", LEFT_MODE);
		//+ -
		BSP_LCD_DrawLine(329+5,24,329+5+40,24);//+ temp zad
		BSP_LCD_DrawLine(329+24,0+5,329+24,49-5);
		BSP_LCD_DrawLine(329+5+50,24,329+5+40+50,24) ;//-temp zad
		BSP_LCD_DrawLine(329+5,24+50,329+5+40,24+50);//+ sterowanie grzalka
		BSP_LCD_DrawLine(329+24,0+5+50,329+24,49-5+50);
		BSP_LCD_DrawLine(329+5+50,24+50,329+5+40+50,24+50); //- sterowanie grzalka

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
	BSP_LCD_FillRect(0,230,479,43);
	
	//wyswietlanie paska temperatury
	if(temp/100.0f<temp_zadana+5) 						BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
	else if(temp/100.0f>=temp_zadana+5 && flag_hot==0)	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
	else								BSP_LCD_SetTextColor(LCD_COLOR_RED);
	if(temp<3000.0f)pasek=0;
	else pasek=(int)((temp/6000.0f)*480.0f)-240;
	
	if(flag_czujnik==1) BSP_LCD_FillRect(0,230,pasek,43);
	//wyswietlanie linii temp zadanej
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
	if((int)((temp_zadana/60.0f)*480.0f)-240>=0 &&	(temp_zadana/60.0f)*480.0f-240<480)  BSP_LCD_FillRect((int)((temp_zadana/60.0f)*480.0f)-240,230,3,43);
	
	//wyswietlanie cyfr temperatury
	BSP_LCD_SetFont(&Font8); //ustawienie czcionki 
	BSP_LCD_DisplayStringAt(0,222,(uint8_t*)"30", LEFT_MODE);
	BSP_LCD_DisplayStringAt(79,222,(uint8_t*)"40", LEFT_MODE);
	BSP_LCD_DisplayStringAt(159,222,(uint8_t*)"50", LEFT_MODE);
	BSP_LCD_DisplayStringAt(239,222,(uint8_t*)"60", LEFT_MODE);
	BSP_LCD_DisplayStringAt(319,222,(uint8_t*)"70", LEFT_MODE);
	BSP_LCD_DisplayStringAt(399,222,(uint8_t*)"80", LEFT_MODE);
	BSP_LCD_DisplayStringAt(459,222,(uint8_t*)"90", LEFT_MODE);

	
	
	
	
	
	HAL_LTDC_ProgramLineEvent(hltdc, 272);
	
	
	
}
######## klikanie i zmienianie ########################################################################################################################################################################
void touch() {
	now = 0;
	int turn_flag_hot_off = 0;
	int turn_flag_communication_off = 0;
	int turn_flag_czujnik_off = 0;
	int turn_flag_auto_on = -1;
	int increase_temp=0;
	int increase_u=0;
	BSP_TS_GetState(&TS_State);
	for (touch_index = 0; touch_index < TS_State.touchDetected; ++touch_index)
	{
		//przegrzanie
		if (flag_hot == 1) {
			if (TS_State.touchX[touch_index] < 160 && TS_State.touchX[touch_index]>0 && TS_State.touchY[touch_index] < 222 && TS_State.touchY[touch_index]>172)
				now = 1;
			//turn_flag_hot_off = 1;
		}
		//odlaczona komunikacja
		if (flag_communication == 0) {
			if (TS_State.touchX[touch_index] < 319 && TS_State.touchX[touch_index]>159 && TS_State.touchY[touch_index] < 222 && TS_State.touchY[touch_index]>172)
				now = 1;
			turn_flag_communication_off = 1;
		}
		//odlaczony czujnik
		if (flag_czujnik == 0) {
			if (TS_State.touchX[touch_index] < 479 && TS_State.touchX[touch_index]>319 && TS_State.touchY[touch_index] < 222 && TS_State.touchY[touch_index]>172)
				now = 1;
			turn_flag_czujnik_off = 1;
		}
		//wlacz auto
		if (TS_State.touchX[touch_index] < 479 && TS_State.touchX[touch_index]>429 && TS_State.touchY[touch_index] < 50 && TS_State.touchY[touch_index]>0) {
			now = 1;
			turn_flag_auto_on = 1;
		}
		
			//wlacz reczny
		if (TS_State.touchX[touch_index] < 479 && TS_State.touchX[touch_index]>429 && TS_State.touchY[touch_index] < 99 && TS_State.touchY[touch_index]>49) {
			now = 1;
			turn_flag_auto_on =0;
		}
			//+ temp zadana
		if (TS_State.touchX[touch_index] < 379 && TS_State.touchX[touch_index]>329 && TS_State.touchY[touch_index] < 49 && TS_State.touchY[touch_index]>0) {
			now = 1;
			increase_temp = 1;
		}
		//-temp zadana
		if (TS_State.touchX[touch_index] < 429 && TS_State.touchX[touch_index]>379 && TS_State.touchY[touch_index] < 49 && TS_State.touchY[touch_index]>0) {
			now = 1;
			increase_temp = -1;
		}
		//GDY MAMY WLACZONY TRYB RECZNY
		if(flag_auto==0){
			//+sterowanie
			if (TS_State.touchX[touch_index] < 379 && TS_State.touchX[touch_index]>329 && TS_State.touchY[touch_index] < 99 && TS_State.touchY[touch_index]>49) {
				now = 1;
				increase_u = 1;
			}
			//-sterowanie
			if (TS_State.touchX[touch_index] < 429 && TS_State.touchX[touch_index]>379 && TS_State.touchY[touch_index] < 99 && TS_State.touchY[touch_index]>49) {
				now = 1;
				increase_u = -1;
			}
		}
		//if(TS_State.touchX[touch_index]<229 ){ now=1;}
		//else {x=240; BSP_LCD_FillRect(240,20,240,250);}
	}
	if (previous == 0 && now == 1) {
		if (turn_flag_hot_off == 1) flag_hot = 0;
		if (turn_flag_communication_off == 1) flag_communication = 1;
		if (turn_flag_czujnik_off == 1) flag_czujnik = 1;
		if (turn_flag_auto_on == 1) flag_auto = 1;
		else if (turn_flag_auto_on == 0) flag_auto = 0;
		if (increase_temp==1) temp_zadana=temp_zadana+5;
		else if (increase_temp==-1) temp_zadana=temp_zadana-5;
		if (increase_u==1) u_zad=u_zad+5;
		else if (increase_u==-1) u_zad=u_zad-5;
		
		//colorflag=!colorflag;
	}
	previous = now;
}
######MATLAB###############################################################################################################################################################

lambda=10; %parametr lambda np. 1
D=30; %horyzont dynamiki (D)
N=2;%horyzont predykcji (N)
Nu=10; %horyzont sterowania (Nu)(ilosc przyszlych przyrostow wartosci sterowania)

%tu se s dać
s=yskoknew;

%macierz współczynników odpowiedzi skokowej wymiary(NxNu)
M=zeros(N,Nu); 
for i=1:N
 for j=1:Nu
  if (j<=i)             %wypelnianie macierzy trojkatnej dolnej M   
   M(i,j)=s(i-j+1);
  end;
 end;
end;

I=eye(Nu);              %tworzenie macierzy jednostkowej o wymiarach NuxNu
K=(M'*M+lambda*I)\M';   %macierz K
Mp=zeros(N,D-1);        %macierz ma wymiary Nx(D-1)
%wypelnianie macierzy Mp
for i=1:N
 for j=1:D-1
  if i+j<=D
   Mp(i,j)=s(i+j)-s(j);
  else
   Mp(i,j)=s(D)-s(j);
  end;      
 end;
end;

Ke=sum(K(1,:));         %współczynnik Ke
Ku=K(1,:)*Mp;           %współczynnik Ku
%zapis do pliku
fileID = fopen('parametryDMC.txt','w');
fprintf(fileID,'Ke=%f \n',Ke);
fprintf(fileID,'%f, ', Ku);
fclose(fileID);